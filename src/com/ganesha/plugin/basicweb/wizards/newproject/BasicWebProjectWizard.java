package com.ganesha.plugin.basicweb.wizards.newproject;import java.io.BufferedReader;import java.io.ByteArrayInputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.lang.reflect.InvocationTargetException;import java.net.URI;import org.eclipse.core.resources.IFile;import org.eclipse.core.resources.IFolder;import org.eclipse.core.resources.IProject;import org.eclipse.core.resources.IProjectDescription;import org.eclipse.core.resources.IResource;import org.eclipse.core.resources.IWorkspace;import org.eclipse.core.resources.ResourcesPlugin;import org.eclipse.core.runtime.CoreException;import org.eclipse.core.runtime.IConfigurationElement;import org.eclipse.core.runtime.IPath;import org.eclipse.core.runtime.IProgressMonitor;import org.eclipse.core.runtime.IStatus;import org.eclipse.core.runtime.OperationCanceledException;import org.eclipse.core.runtime.Path;import org.eclipse.core.runtime.Status;import org.eclipse.core.runtime.SubProgressMonitor;import org.eclipse.jface.dialogs.MessageDialog;import org.eclipse.jface.viewers.IStructuredSelection;import org.eclipse.jface.wizard.Wizard;import org.eclipse.ui.INewWizard;import org.eclipse.ui.IWorkbench;import org.eclipse.ui.actions.WorkspaceModifyOperation;import org.eclipse.ui.dialogs.WizardNewProjectCreationPage;import com.ganesha.plugin.Utils;import com.ganesha.plugin.basicweb.Constants;import com.ganesha.plugin.basicweb.Templates;public class BasicWebProjectWizard extends Wizard implements INewWizard {	private IConfigurationElement config;	private IWorkbench workbench;	private IStructuredSelection selection;	private IProject project;	private String dbUrl;	private String dbUsername;	private String dbPassword;	private String client;	private String basePackage;	@Override	public void addPages() {		setWindowTitle(Constants.WIZARD_TITLE);		WizardNewProjectCreationPage wizardPage = new WizardNewProjectCreationPage(				WizardNewProjectCreationPage.class.getName());		wizardPage.setTitle(Constants.WIZARD_TITLE);		wizardPage.setDescription(Constants.WIZARD_DESCRIPTION);		addPage(wizardPage);		addPage(new PackageSettingPage());		addPage(new DatabaseSettingPage());	}	@Override	public void init(IWorkbench arg0, IStructuredSelection arg1) {		// TODO Auto-generated method stub	}	@Override	public boolean performFinish() {		if (project != null) {			return true;		}		WizardNewProjectCreationPage wizardPage = (WizardNewProjectCreationPage) getPage(WizardNewProjectCreationPage.class				.getName());		final IProject projectHandle = wizardPage.getProjectHandle();		URI projectURI = (!wizardPage.useDefaults()) ? wizardPage				.getLocationURI() : null;		IWorkspace workspace = ResourcesPlugin.getWorkspace();		final IProjectDescription desc = workspace				.newProjectDescription(projectHandle.getName());		desc.setLocationURI(projectURI);		DatabaseSettingPage databaseSettingPage = (DatabaseSettingPage) getPage(DatabaseSettingPage.NAME);		dbUrl = databaseSettingPage.getUrl();		dbUsername = databaseSettingPage.getUserName();		dbPassword = databaseSettingPage.getPassword();		PackageSettingPage packageSettingPage = (PackageSettingPage) getPage(PackageSettingPage.NAME);		client = packageSettingPage.getClient();		basePackage = packageSettingPage.getBasePackage();		/*		 * Just like the ExampleWizard, but this time with an operation object		 * that modifies workspaces.		 */		WorkspaceModifyOperation op = new WorkspaceModifyOperation() {			@Override			protected void execute(IProgressMonitor monitor)					throws CoreException {				createProject(desc, projectHandle, monitor);			}		};		/*		 * This isn't as robust as the code in the BasicNewProjectResourceWizard		 * class. Consider beefing this up to improve error handling.		 */		try {			getContainer().run(true, true, op);		} catch (InterruptedException e) {			return false;		} catch (InvocationTargetException e) {			Throwable realException = e.getTargetException();			MessageDialog.openError(getShell(), "Error",					realException.getMessage());			return false;		}		project = projectHandle;		if (project == null) {			return false;		}		/*		 * TODO set perspective		 */		// BasicNewProjectResourceWizard.updatePerspective(config);		// BasicNewProjectResourceWizard.selectAndReveal(project,		// workbench.getActiveWorkbenchWindow());		return true;	}	private void createCustomPackage(IProject proj, IProgressMonitor monitor)			throws CoreException {		IFolder clientDir = proj.getFolder((Constants.JAVA_SOURCE + "."				+ Constants.COM_GANESHA + "." + client).replace('.',				IPath.SEPARATOR));		Utils.createResource(clientDir, monitor);		IFolder basePackageDir = proj.getFolder((Constants.JAVA_SOURCE + "."				+ Constants.COM_GANESHA + "." + client + "." + basePackage)				.replace('.', IPath.SEPARATOR));		Utils.createResource(basePackageDir, monitor);		IFolder modulesPackage = proj				.getFolder((Constants.JAVA_SOURCE + "." + Constants.COM_GANESHA						+ "." + client + "." + basePackage + ".modules")						.replace('.', IPath.SEPARATOR));		Utils.createResource(modulesPackage, monitor);		IFolder modelsPackage = proj				.getFolder((Constants.JAVA_SOURCE + "." + Constants.COM_GANESHA						+ "." + client + "." + basePackage + ".model").replace(						'.', IPath.SEPARATOR));		Utils.createResource(modelsPackage, monitor);	}	private void createFile(IProject project, IPath path,			InputStream contentStream, IProgressMonitor monitor)			throws CoreException {		IFile file = project.getFile(path);		if (file.exists()) {			file.setContents(contentStream, true, true, monitor);		} else {			file.create(contentStream, true, monitor);		}	}	private void createFile(IProject project, IPath path,			IProgressMonitor monitor) throws CoreException {		InputStream contentStream = null;		try {			String filePath = Constants.TEMPLATES_PATH + path.toString();			if (Utils.isAsciiText(filePath)) {				contentStream = openContentStream(filePath, project.getName());			} else {				contentStream = this.getClass().getClassLoader()						.getResourceAsStream(filePath);			}			createFile(project, path, contentStream, monitor);		} catch (IOException e) {			IStatus status = new Status(IStatus.ERROR, this.getClass()					.getName(), IStatus.OK, e.getLocalizedMessage(), e);			throw new CoreException(status);		} finally {			try {				if (contentStream != null) {					contentStream.close();				}			} catch (IOException e) {				IStatus status = new Status(IStatus.ERROR, this.getClass()						.getName(), IStatus.OK, e.getLocalizedMessage(), e);				throw new CoreException(status);			}		}	}	private void createProject(IProjectDescription description, IProject proj,			IProgressMonitor monitor) throws CoreException,			OperationCanceledException {		try {			monitor.beginTask("", 2000);			proj.create(description, new SubProgressMonitor(monitor, 1000));			if (monitor.isCanceled()) {				throw new OperationCanceledException();			}			proj.open(IResource.BACKGROUND_REFRESH, new SubProgressMonitor(					monitor, 1000));			for (int i = 0; i < Templates.count(); ++i) {				IPath path = new Path(Templates.get(i));				IFile file = proj.getFile(path);				Utils.createResource(file.getParent(), monitor);				createFile(proj, path, monitor);			}			createCustomPackage(proj, monitor);		} catch (RuntimeException e) {			IStatus status = new Status(IStatus.ERROR, this.getClass()					.getName(), IStatus.OK, e.getLocalizedMessage(), e);			throw new CoreException(status);		} finally {			monitor.done();		}	}	private InputStream openContentStream(String filePath, String projectName)			throws CoreException {		String newLine = System.getProperty("line.separator");		StringBuilder sb = new StringBuilder();		InputStream input = null;		BufferedReader reader = null;		try {			input = this.getClass().getClassLoader()					.getResourceAsStream(filePath);			reader = new BufferedReader(new InputStreamReader(input));			String line;			while ((line = reader.readLine()) != null) {				line = line.replaceAll("\\" + Constants.PROJECT_NAME_VAR,						projectName);				line = line.replaceAll("\\" + Constants.DB_URL_VAR, dbUrl);				line = line.replaceAll("\\" + Constants.DB_USERNAME_VAR,						dbUsername);				line = line.replaceAll("\\" + Constants.DB_PASSWORD_VAR,						dbPassword);				line = line.replaceAll("\\" + Constants.GANESHA_CLIENT_VAR,						"com.ganesha." + client);				line = line.replaceAll(						"\\" + Constants.GANESHA_BASEPACKAGE_VAR,						"com.ganesha." + client + "." + basePackage);				line = line.replaceAll("\\" + Constants.GANESHA_MODULES_VAR,						"com.ganesha." + client + "." + basePackage								+ ".modules");				line = line.replaceAll("\\" + Constants.GANESHA_MODEL_VAR,						"com.ganesha." + client + "." + basePackage + ".model");				sb.append(line);				sb.append(newLine);			}		} catch (IOException e) {			IStatus status = new Status(IStatus.ERROR, this.getClass()					.getName(), IStatus.OK, e.getLocalizedMessage(), e);			throw new CoreException(status);		} finally {			if (reader != null) {				try {					reader.close();				} catch (IOException e) {					IStatus status = new Status(IStatus.ERROR, this.getClass()							.getName(), IStatus.OK, e.getLocalizedMessage(),							null);					throw new CoreException(status);				}			}		}		return new ByteArrayInputStream(sb.toString().getBytes());	}}