package com.ganesha.plugin;import java.io.BufferedReader;import java.io.ByteArrayInputStream;import java.io.File;import java.io.FilenameFilter;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.Iterator;import java.util.Map;import org.eclipse.core.resources.IFile;import org.eclipse.core.resources.IFolder;import org.eclipse.core.resources.IProject;import org.eclipse.core.resources.IResource;import org.eclipse.core.runtime.CoreException;import org.eclipse.core.runtime.IProgressMonitor;import org.eclipse.core.runtime.IStatus;import org.eclipse.core.runtime.Status;import org.eclipse.swt.widgets.Table;import org.eclipse.swt.widgets.TableItem;import com.ganesha.plugin.basicweb.wizards.RowItem;public class Utils {	public static String camelToHuman(String camel) {		StringBuilder stringBuilder = new StringBuilder();		for (int i = 0; i < camel.length(); ++i) {			char theChar = camel.charAt(i);			if (i == 0) {				theChar = Character.toUpperCase(theChar);			}			if (Character.isUpperCase(theChar)) {				if (i == 0 || Character.isUpperCase(camel.charAt(i - 1))) {					stringBuilder.append(theChar);				} else {					stringBuilder.append(" ").append(theChar);				}			} else {				stringBuilder.append(theChar);			}		}		return stringBuilder.toString();	}	public static void createResource(IResource resource,			IProgressMonitor monitor) throws CoreException {		if (resource == null || resource.exists()) {			return;		}		if (!resource.getParent().exists()) {			createResource(resource.getParent(), monitor);		}		switch (resource.getType()) {		case IResource.FILE:			((IFile) resource).create(new ByteArrayInputStream(new byte[0]),					true, monitor);			break;		case IResource.FOLDER:			((IFolder) resource).create(IResource.NONE, true, monitor);			break;		case IResource.PROJECT:			((IProject) resource).create(monitor);			((IProject) resource).open(monitor);			break;		}	}	public static boolean isAsciiText(InputStream inputStream)			throws IOException {		byte[] ascii = new byte[] { 9, 10, 13, 0 };		byte[] bytes = new byte[64];		inputStream.read(bytes, 0, bytes.length);		for (int i = 0; i < bytes.length; i++) {			byte b = bytes[i];			if ((b < 32 || b > 127)) {				boolean valid = false;				for (byte bb : ascii) {					if (bb == b) {						valid = true;						break;					}				}				if (!valid) {					return false;				}			}		}		return true;	}	public static boolean isAsciiText(String filePath) throws IOException {		InputStream inputStream = null;		try {			inputStream = Utils.class.getClassLoader().getResourceAsStream(					filePath);			return isAsciiText(inputStream);		} finally {			if (inputStream != null) {				inputStream.close();			}		}	}	public static void main(String[] args) throws Exception {		File file = new File(Utils.class.getClassLoader().getResource("")				.toURI());		file = file.getParentFile().listFiles(new FilenameFilter() {			@Override			public boolean accept(File dir, String name) {				if (name.equals("templates")) {					return true;				} else {					return false;				}			}		})[0];		scanFilesRecursively(file);	}	public static void moveRowDown(Table table) {		int i = table.getSelectionIndex();		if (i < table.getItemCount() - 1) {			TableItem item1 = table.getItem(i);			TableItem item2 = table.getItem(i + 1);			RowItem rowItem1 = RowItem.createFromTableItem(item1);			RowItem rowItem2 = RowItem.createFromTableItem(item2);			rowItem2.assignToTableItem(item1);			rowItem1.assignToTableItem(item2);			table.setSelection(i + 1);			table.setFocus();		}	}	public static void moveRowUp(Table table) {		int i = table.getSelectionIndex();		if (i > 0) {			TableItem item1 = table.getItem(i);			TableItem item2 = table.getItem(i - 1);			RowItem rowItem1 = RowItem.createFromTableItem(item1);			RowItem rowItem2 = RowItem.createFromTableItem(item2);			rowItem2.assignToTableItem(item1);			rowItem1.assignToTableItem(item2);			table.setSelection(i - 1);			table.setFocus();		}	}	public static InputStream openContentStream(IFile file,			Map<String, String> map, Class<?> clazz) throws CoreException {		String newLine = System.getProperty("line.separator");		StringBuilder sb = new StringBuilder();		InputStream input = null;		BufferedReader reader = null;		try {			input = file.getContents();			reader = new BufferedReader(new InputStreamReader(input));			String line;			while ((line = reader.readLine()) != null) {				Iterator<String> iterator = map.keySet().iterator();				while (iterator.hasNext()) {					String key = iterator.next();					String value = map.get(key);					line = line.replaceAll("\\" + key, value);				}				sb.append(line);				sb.append(newLine);			}			return new ByteArrayInputStream(sb.toString().getBytes());		} catch (IOException e) {			IStatus status = new Status(IStatus.ERROR, clazz.getName(),					IStatus.OK, e.getLocalizedMessage(), e);			throw new CoreException(status);		} finally {			if (reader != null) {				try {					reader.close();				} catch (IOException e) {					IStatus status = new Status(IStatus.ERROR, clazz.getName(),							IStatus.OK, e.getLocalizedMessage(), null);					throw new CoreException(status);				}			}		}	}	public static InputStream openContentStream(String filePath,			Map<String, String> map, Class<?> clazz, boolean absolutePath)			throws CoreException {		String newLine = System.getProperty("line.separator");		StringBuilder sb = new StringBuilder();		InputStream input = null;		BufferedReader reader = null;		try {			if (absolutePath) {				input = clazz.getClassLoader().getResourceAsStream(filePath);			} else {				input = clazz.getResourceAsStream(filePath);			}			reader = new BufferedReader(new InputStreamReader(input));			String line;			while ((line = reader.readLine()) != null) {				Iterator<String> iterator = map.keySet().iterator();				while (iterator.hasNext()) {					String key = iterator.next();					String value = map.get(key);					line = line.replaceAll("\\" + key, value);				}				sb.append(line);				sb.append(newLine);			}			return new ByteArrayInputStream(sb.toString().getBytes());		} catch (IOException e) {			IStatus status = new Status(IStatus.ERROR, clazz.getName(),					IStatus.OK, e.getLocalizedMessage(), e);			throw new CoreException(status);		} finally {			if (reader != null) {				try {					reader.close();				} catch (IOException e) {					IStatus status = new Status(IStatus.ERROR, clazz.getName(),							IStatus.OK, e.getLocalizedMessage(), null);					throw new CoreException(status);				}			}		}	}	public static void scanFilesRecursively(File file) {		File[] childs = file.listFiles();		if (childs != null && childs.length > 0) {			for (File child : childs) {				scanFilesRecursively(child);			}		} else {			if (file.isFile()) {				System.out.println("files.add(\"" + file.getPath() + "\");");			} else {				/*				 * TODO				 */			}		}	}}